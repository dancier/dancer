openapi: 3.0.2
info:
  title: Dancier
  version: '1.0'
servers:
  - url: 'https://backend.dancier.net'
  - url: 'http://localhost:8080'
paths:
  /authentication/register:
    post:
      summary: starts the user registrations process
      tags:
        - IAM
      requestBody:
        description: contains the email and password for the user to be setup
        required: true
        content:
          application/json:
            examples:
              register_user:
                $ref: '#/components/examples/register_user'
            schema:
              $ref: '#/components/schemas/change_profile'
      responses:
        '201':
          description: In case the account could be created. 
            The user still has to validate his email address.
            An Email has been send out to the provided address.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api_response"
              example:
                "success": true
                "messages":
                  - User registrated successfully
        '409':
          description: In case the provided email-adress already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_response'
              example:
                "success": false
                "messages":
                  - Email address already exist
  /authentication/email/validate/{validationCode}:
    get:
      tags:
        - IAM
      parameters:
        - in: path
          name: validationCode
          schema:
            type: string
          required: true
          description: Numeric ID of the user to get
      summary: validates the email address of a user
      description: Validates the email address, that the user provided when he started 
        the registration process. He should have got a link sent via email. This mail
        includes a link that points to this endpoint. 
      responses:
        '301':
          description: if the validation was successfully. The customer will be
           redirected to a configurable url. This url should inform the User, that his 
           mail is no validated and he can login.
        '400':
          description: in case of any problems like the code not known in the system, 
            outdated or any other problem like this.

  /authentication/email/validation:
    post:
      tags:
        - IAM
      summary: creates email validation code and send it per mail
      requestBody:
        description: request to get a code send via email, so reset the password
        required: true
        content:
          text/plain:
            examples:
              create_email_validation_code:
                $ref: '#/components/examples/create_email_validation_code'
            schema:
              $ref: '#/components/schemas/create_email_validation_code'
      responses:
        '200':
          description: when the code could be generated
  /authentication/login:
    post:
      tags:
        - IAM
      summary: The customer will be logged in.
      description:  It ist necessary that the customer has already
       successfully validated his email-address.
      requestBody:
        description: attempt to login the user
        required: true
        content:
          application/json:
            examples:
              login_user:
                $ref: '#/components/examples/login_user'
            schema:
              $ref: '#/components/schemas/login_user'
      responses:
        '200':
          description: In case the login was successfull.
        '401':
          description: In case the provided credentials were not correct.
        '403':
          description: in case we have not validated the email yet.
  /authentication/checkEmailAvailability/{email}:
    get:
      tags:
        - IAM
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: email to check if account already exits
      responses:
        '200':
          description: true or false depending on the existing of an account    
  /authentication/logout:
    get:
      tags:
        - IAM
      summary: log out the user
      responses:
        '200' : 
          description: This logs out the user. It resets the cookie. Any valid tokens are not affected.
  /authentication/password/reset:
    post:
      tags:
        - IAM
      summary: send a link via mail to enable password reset
      description: requests a code to be send to the user via email to reset 
        the passwort
      requestBody:
        required: true
        content:
          text/plain:
            examples:
              create_password_reset_code:
                $ref: '#/components/examples/create_password_reset_code'
            schema:
                $ref: '#/components/schemas/create_password_reset_code'
      responses:
        '200':
          description: mail was send

  /authentication/password/reset/{validationCode}:
    get:
      summary: reset the password
      description: the link with the validationCode has been send to the 
        user. So we can be sure, das the link is used by the user and
        change the password.
      tags:
        - IAM
      parameters:
        - in: path
          name: validationCode
          schema:
            type: string
          required: true
          description: the code to check that it is really the user with access to the mail account
      responses:
        '200':
          description: contains the new password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/password_reset"
              example:
                password: secret
  /profile:
    get:
      summary: retrieves all the information that shows up in the profile
      tags:
        - Profile
      responses:
        '200':
          description: the information for the profile of the looged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_profile"
    post:
      summary: change profile information of the user
      tags:
        - Profile
      requestBody:
        description: The complete information what should be shown in the profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/change_profile'
      responses:
        '200':
          description: indicates that the request was successfull
  /profile/allDances:
    get:
      summary: retrieves a List of all dance names
      tags:
        - Profile
      responses:
        '200':
          description: retrives an array of strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /profile/checkDancerNameAvailibility/{dancerName}:
    get:
      summary: check if a name is still free
      tags:
        - Profile
      parameters:
        - in: path
          name: dancerName
          schema:
            type: string
          required: true
          description: is this name free?

      responses:
        '200':
          description: true of false
  /recommendations:
    get:
      summary: retrieves all precomputes recommendations
      tags:
        - Recommendations
      responses:
        '200':
          description: retrieves an potentially empty array
  /location/zipCode/{country}/{code}:
    get:
      summary: resolve code to location
      tags:
        - Location
      parameters:
        - in: path
          name: country
          schema:
            type: string
          required: true
          description: country
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: code

      responses:
        '200':
          description: get geo coordinates and city from zip code
  /images:
    post:
      summary: uploads a png image
      tags:
        - Images
      responses:
        '200':
          description: image was uploaded correctly
  /images/{hash}.png:
    get:
      summary: get image
      tags:
        - Images
      parameters:
        - in: path
          name: hash
          schema:
            type: string
          required: true
          description: the sha256 hash of the original image
      responses:
        '200':
          description: get it in orginal
  /images/{hash}/{width}.png:
    get:
      summary: get scaled version
      tags:
        - Images
      parameters:
        - in: path
          name: hash
          schema:
            type: string
          required: true
          description: the sha256 hash of the original image
        - in: path
          name: width
          schema:
            type: string
          required: true
          description: the desired width
      responses:
        '200':
          description: get scaled version 
          
components:
  examples:
    register_user:
      value:
        "email": "foo@bar.de"
        "password": "secrect"
    login_user:
      value:
        "email": "foo@bar.de"
        "password": "secret"
    create_email_validation_code:
      value:
        foobar
    create_password_reset_code:
      value:
        foobar
    change_profile:
      value:
        "bla": string
  schemas:
    gender:
      type: string
      enum:
        - MALE
        - FEMALE
        - DIVERS
        - NA
    dance_profile:
      type: object
      properties:
        dance:
          type: string
        level:
          type: string
          enum:
            - NO_EXPERIENCE
            - BASIC
            - INTERMEDIATE
            - ADVANCED
            - PRO
        leading:
          type: string
          enum:
            - FOLLOW
            - LEAD
            - BOTH
            - NA
    change_profile:
      type: object
      properties:
        size:
          type: integer
        gender:
          $ref: "#/components/schemas/gender"
        username:
          type: string
        birthDate:
          type: string
          format: date
        ableTo:
          type: array
          items:
            $ref: "#/components/schemas/dance_profile"
        wantsTo:
          type: array
          items:
            $ref: "#/components/schemas/dance_profile"
    get_profile:
      type: object
      properties:
        id:
          type: string
        size:
          type: integer
        gender:
          $ref: "#/components/schemas/gender"
        username:
          type: string
        birthDate:
          type: string
          format: date
        ableTo:
          type: array
          items:
            $ref: '#/components/schemas/dance_profile'
        wantsTo:
          type: array
          items:
            $ref: '#/components/schemas/dance_profile'
        email:
          type: string
    register_user:
      type: object
      properties:
        "email":
          type: string
        "password":
          type: string
    login_user:
      type: object
      properties:
        "email":
          type: string
        "password":
          type: string
    password_reset:
      type: object
      properties:
        "password":
          type: string
    create_email_validation_code:
      type: string
    create_password_reset_code:
      type: string
    api_response:
      type: object
      properties:
        "success":
          type: boolean
        "messages":
          type: array
          items: {
            type: string
          }
    login_response:
      type: object
      properties:
        "accessToken":
          type: string
        "tokenType":
          type: string