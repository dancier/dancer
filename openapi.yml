openapi: 3.0.2
info:
  title: Dancier
  version: '1.0'
servers:
  - url: 'https://dancier.net'
  - url: 'http://localhost:8080'
paths:
  /authentication/whoami:
    get:
      summary: information about the user
      tags:
        - IAM
      responses:
        '200':
          description: "basic information of the user"
          content:
            application/json:
              example:
                "roles":
                  - "ROLE_USER"
                  - "ROLE_HUMAN"
                "emailAddress": foo@bar.de
              
  /authentication/registrations:
    post:
      summary: starts the user registrations process, 
        the client need to have ROLE_HUMAN assigned 
      tags:
        - IAM
      requestBody:
        description: email address and the password for the user
        required: true
        content:
          application/json:
            examples:
              register_user:
                $ref: '#/components/examples/register_user'
            schema:
              $ref: '#/components/schemas/register_user'
      responses:
        '201':
          description: In case the account could be created. 
            The user still has to validate his email address.
            An Email has been send out to the provided address.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api_response"
              example:
                "success": true
                "messages":
                  - User registrated successfully
        '401':
          description: In case the captche code was not present or the validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_response'
              example:
                "success": false
                "messages":
                  - "Not authorized as a human: Token ist not valid. Maybe expired?"
        '409':
          description: In case the provided email-adress already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_response'
              example:
                "success": false
                "messages":
                  - Email address already exist
  /authentication/login:
    post:
      tags:
        - IAM
      summary: The customer will be logged in.
      description:  It ist necessary that the customer has already
       successfully validated his email-address.
      requestBody:
        description: attempt to login the user
        required: true
        content:
          application/json:
            examples:
              login_user:
                $ref: '#/components/examples/login_user'
            schema:
              $ref: '#/components/schemas/login_user'
      responses:
        '200':
          description: In case the login was successfull.
        '401':
          description: In case the provided credentials were not correct.
        '403':
          description: in case we have not validated the email yet.
  /authentication/loginAsHuman:
    post:
      tags:
        - IAM
      responses:
        '200':
          description: when the verficaton as a human succeded.
            A jwt-token with ROLE_HUMAN has been set.
        '401':
          description: in case the validation failed.

  /authentication/logout:
    get:
      tags:
        - IAM
      summary: log out the user
      responses:
        '200' : 
          description: This logs out the user. It resets the cookie. Any valid tokens are not affected.

  /authentication/email-validations:
    post:
      tags:
        - IAM
      summary: creates email validation code and send it per mail
      requestBody:
        description: request to get a code send via email, so reset the password
        required: true
        content:
          text/plain:
            examples:
              create_email_validation_code:
                $ref: '#/components/examples/create_email_validation_code'
            schema:
              $ref: '#/components/schemas/create_email_validation_code'
      responses:
        '200':
          description: will also be send, when no user is found to not reveal the existince of users
  /authentication/email-validations/{emailValidationCode}:
    put:
      tags:
        - IAM
      parameters:
        - in: path
          name: emailValidationCode
          schema:
            type: string
          required: true
          description: ID of the user to got via mail
      summary: validates the email address of a user
      description: Validates the email address, that the user provided when he started 
        the registration process.
        When he clicks on the link, that browser will be redirected, to the frontend,
        that will extract the validation code and in turn will make
        a request to this endpoint.
        When the validation was successfull, the user will be 
        directly logged in, by the response setting a proper cookie.
        In all other case the reason for failing will be returned.
      responses:
        '200':
          description: In case the validation was successfully. 
            The response, also contains a login cookie.
        '400':
          description: in case of any problems like the code not known in the system, 
            outdated or any other problem like this.
  /authentication/password-changes:
    post:
      tags:
        - IAM
      summary: send a link via mail to enable password reset
      description: requests a code to be send to the user via email to reset 
        the passwort
      requestBody:
        required: true
        content:
          text/plain:
            examples:
              create_password_reset_code:
                $ref: '#/components/examples/create_password_reset_code'
            schema:
                $ref: '#/components/schemas/create_password_reset_code'
      responses:
        '200':
          description: mail was send
  /authentication/password-changes/{validationCode}:
    put:
      summary: set the user password to the one provided
      description: the link with the validationCode has been send to the 
        user. So we can be sure, das the link is used by the user and
        change the password.
      tags:
        - IAM
      parameters:
        - in: path
          name: validationCode
          schema:
            type: string
          required: true
          description: the code to check that it is really the user with access to the mail account
      responses:
        '200':
          description: contains the new password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/password_reset"
              example:
                password: secret
  /profile:
    get:
      summary: retrieves all the information that shows up in the profile
      tags:
        - Profile
      responses:
        '200':
          description: the information for the profile of the looged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_profile"
    put:
      summary: change profile information of the user
      tags:
        - Profile
      requestBody:
        description: The complete information what should be shown in the profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/change_profile'
      responses:
        '200':
          description: indicates that the request was successfull
  /profile/checkDancerNameAvailibility/{dancerName}:
    get:
      summary: check if a name is still free
      tags:
        - Profile
      parameters:
        - in: path
          name: dancerName
          schema:
            type: string
          required: true
          description: is this name free?

      responses:
        '200':
          description: true of false
  /dances/:
    get:
      summary: retrieves a List of all dance names
      tags:
        - Dance
      responses:
        '200':
          description: retrives an array of strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /recommendations:
    get:
      summary: retrieves all precomputes recommendations
      tags:
        - Recommendations
      responses:
        '200':
          description: retrieves an potentially empty array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/recommendable"
  /location/zipCode/{country}/{code}:
    get:
      summary: resolve code to location
      tags:
        - Location
      parameters:
        - in: path
          name: country
          schema:
            type: string
          required: true
          description: country
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: code

      responses:
        '200':
          description: get geo coordinates and city from zip code
  /images:
    post:
      summary: uploads a png image
      tags:
        - Images
      responses:
        '200':
          description: image was uploaded correctly
  /images/{hash}.png:
    get:
      summary: get image
      tags:
        - Images
      parameters:
        - in: path
          name: hash
          schema:
            type: string
          required: true
          description: the sha256 hash of the original image
      responses:
        '200':
          description: get it in orginal
  /images/{hash}/{width}.png:
    get:
      summary: get scaled version
      tags:
        - Images
      parameters:
        - in: path
          name: hash
          schema:
            type: string
          required: true
          description: the sha256 hash of the original image
        - in: path
          name: width
          schema:
            type: string
          required: true
          description: the desired width
      responses:
        '200':
          description: get scaled version 
/eventlog:
  post:
    summary: send an event to the backend
    tags:
      - Eventlog
    requestBody:
      description: send if something interessting happend
      required: true
      content:
        application/json:
          example:
            "topic": "registration_succeded"
            "metadata": 
              sourceTime: "2022-05"
            "payload":
              appInstanceId: "ljjlajdflkjasldfjalskjflasdjf"
              emailAddress: "marc@gorzala.de"              
components:
  securitySchemes:
    jwt-token:
      type: apiKey
      in: cookie
      name: jwt-token
  examples:
    register_user:
      value:
        "email": "foo@bar.de"
        "password": "secrect"
        "acceptTermsAndConditions": "true"
    login_user:
      value:
        "email": "foo@bar.de"
        "password": "secret"
    create_email_validation_code:
      value:
        foo@bar.de
    create_password_reset_code:
      value:
        foobar
    change_profile:
      value:
        "bla": string
  schemas:
    gender:
      type: string
      enum:
        - MALE
        - FEMALE
        - DIVERS
        - NA
    recommendable:
      type: object
      properties:
        type:
          type: string
          enum:
            - DANCER
            - SCHOOL
        payload:
          type: object
          oneOf:
            - $ref: "#/components/schemas/recommended_dancer"
            - $ref: "#/components/schemas/recommended_school"
    recommended_dancer:
      type: object
      properties:
        name:
          type: string
    recommended_school:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        supportedDances:
          description: what can you learn/practise in this school
          type: array
          items:
            type: string
        country:
          type: string
          enum:
            - GER
        city:
          type: string
        zipCode:
          type: string
        profileImageHash:
          type: string
        
    dance_profile:
      type: object
      properties:
        dance:
          type: string
        level:
          type: string
          enum:
            - NO_EXPERIENCE
            - BASIC
            - INTERMEDIATE
            - ADVANCED
            - PRO
        leading:
          type: string
          enum:
            - FOLLOW
            - LEAD
            - BOTH
            - NA
    change_profile:
      type: object
      properties:
        size:
          type: integer
        aboutMe:
          type: string
        gender:
          $ref: "#/components/schemas/gender"
        dancerName:
          type: string
        birthDate:
          type: string
          format: date
        zipCode:
          type: string
        country:
          type: string
          enum:
            - GER
        profileImageHash:
          type: string
        ableTo:
          type: array
          items:
            $ref: "#/components/schemas/dance_profile"
        wantsTo:
          type: array
          items:
            $ref: "#/components/schemas/dance_profile"
    get_profile:
      type: object
      properties:
        id:
          type: string
        aboutMe:
          type: string
        size:
          type: integer
        gender:
          $ref: "#/components/schemas/gender"
        dancerName:
          type: string
        birthDate:
          type: string
          format: date
        ableTo:
          type: array
          items:
            $ref: '#/components/schemas/dance_profile'
        wantsTo:
          type: array
          items:
            $ref: '#/components/schemas/dance_profile'
        email:
          type: string
        zipCode:
          type: string
        city:
          type: string
        country:
          type: string
          enum:
            - GER
        profileImageHash:
          type: string
    register_user:
      type: object
      properties:
        "email":
          type: string
          maxLength: 100
        "password":
          type: string
          minLength: 4
          maxLength: 40
        "acceptTermsAndConditions":
          type: string
          enum:
            - "true"
            - "false"
    login_user:
      type: object
      properties:
        "email":
          type: string
        "password":
          type: string
    password_reset:
      type: object
      properties:
        "password":
          type: string
    create_email_validation_code:
      type: string
    create_password_reset_code:
      type: string
    api_response:
      type: object
      properties:
        "success":
          type: boolean
        "messages":
          type: array
          items: {
            type: string
          }
    login_response:
      type: object
      properties:
        "accessToken":
          type: string
        "tokenType":
          type: string